#Create aplication named "storefront"
mkdir storefront
cd storefront

pipenv install django

code .
 
pipenv shell

django-admin

django-admin startproject storefront .   #. sets current working directory

python manage.py == django-admin 

python manage.py runserver

#python working environment
pipenv --venv

#set terminal to VSC
CTRL+SHIFT+P >> python select interpreter --> path: $pipenv --venv\bin\python
press +next to powershell to start new terminal


python manage.py runserver    #CTRL+C for exit #see URL

#CREATE A NEW APP
python manage.py startapp playground #creates new app
#add app playground in settings.py of storefront  in INSTALLED_APPS

"""
migrations folder --> generating databases
admin 			  --> define how admin interface for this app is going to look like
apps  			  --> configure the app 
models 			  --> define the modules. Modules are used to pull data from databases and be presented to user
test              --> Run unit tests 
views             --> request handler   request->response
"""


################## INI FUNDAMENTALS ############################
### First view function   request /playground/hello
(1) define request in views
playground > views.py
from django.http import HttpResponse
def say_hello(request):
	return HttpResponse("Hello World")
(2) map request to URL
#create urls.py in playground folder
#playground > urls.py
from django.urls import path
from . import views (. current folder)

urlpatterns = [
	path('/hello/', views.say_hello)
]
#storefront > urls.py 
from django.urls import include
	path('playground/', include('playground.urls'))
	
	
### Add template
(1) create template file
playground > templates > hello.html  (create folder and file)
<h1>Hello World</h1>
(2) modify view function
def say_hello(request):
    return render(request,'hello.html')
(2.1) add a str-name mapping
return render(request,'hello.html',{'name':'Joan'})
<h1>Hello {{name}}</h1>

#debug tool
https://django-debug-toolbar.readthedocs.io/en/latest/installation.html

################## FIN FUNDAMENTALS ############################

################## INI Data Model ############################
#create new apps and edit MODEL (data!!!)
python manage.py startapp store
python manage.py startapp tags
#add app store,tags in settings.py of storefront  in INSTALLED_APPS

#google > django field types

father: customer
child: address

on_delete:
CASCADE --> when customer is deleted; address is also deleted
SET_NULL --> if the address accepts null values; when customer is deleted the customer field set to null
SET_DEFAULT --> to default value
PROTECT --> prevent deletion of father before child: customer cannot be deleted without deleting the address

primarey_key = True? django will use customer as ID

#customer can only have 1 address:
customer = models.OneToOneField(Customer, on_delete=models.CASCADE, primary_key=True)

#customer can have several address
customer = models.ForeignKey(Customer, on_delete=models.CASCADE)



################## FIN Data Model ############################

################## INI Setting up Database #######################

#geenrate data model
python manage.py makemigrations 


#create data model
python manage.py migrate


#revert migration
(1) python manage.py migrate store 0004
(2) delete migration file 0005
(3) revert changes in the code (i.e. in models.py) 

CTRL+SHIFT+P SQLite Open Database to see the databases in CTRL+B menu

settings.py

#predetermined
DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }
}

#setting up a MySQL database
DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.mysql',
        'NAME': 'storefront',
		'HOST': 'localhost',
		'USER': 'root',
		'PASSWORD': 'MyPassword'
    }
}


################## FIN Setting up Database #######################



################## INI ORM - queries #######################
#https://docs.djangoproject.com/en/4.0/ref/models/querysets/
#Django database functions


#say_hello function, returns... :
return render( request, {'products': list(query_set)} )

(1) import class
from store.models import Product
from django.db.models import Q, F

#return a query_set object. The query is evaluated when in a for loop (i.e. for product in query_set:)
Product.objects.
 - .all() 						select * from product            (query_set)
 - .all()[5:10]								LIMIT = 5 OFFSET = 5

 - .get(id = 1) 				select * from product where id=1 (product)
 
 - .filter(unit_price__gt=20) 	select * from product where        gt/gte/lt/lte/range=(20,30)
 - .filter(collection__id=1 ) 	JOIN Product and Collection 
 - .filter(title__cointains='coffee')   filter strings            icontains/startswith/endswith
 - .filter(last_update__year=2021)      filter dates              month/day
 - .filter(description__isnull=True)
 AND: .filter().filter()
 OR:  .filter( Q(inventory__lt=10) | Q(unit_price__lt=20) )
 - .filter(inventory=F('unit_price'))       F references a table field (same table)
 - .filter(inventory=F('collection__id'))   F references a table field (different table)

 - order_by('title','unit_price')    ('-title' -> desc)
 - order_by('unit_price')[0]
 - earliest('unit_price')

 - .count() 						select count(*) from product table

from django.db.models.aggregates import Count, Max, Min, Av
 -.aggregate(count=Count('id'))   select count(id) AS count from ___ 
 - aggregate(count=Count('id'), min_price=Min('unit_price'))
 
#Create a new column  
 - annotate(is_new=Value(True))     from django.db.models import Value    
 - annotate(new_id=F('id') + 1) 
 - annotate( full_name = Func( F('first_name'), Value(' '), F('last_name'), function = 'CONCAT'))
			 full_name = Concat( 'first_name', Value(' '), 'last_name' )
			 
 - annotate( ExpressionWrapper(discounted_price=F('unit_price') * 0.8, output_field=DecimalField())
 



hello.html > 

#1 result
{{product}}

#for loop
<ul>
	{% for product in products %} <li>{{ product.title }}<\li>  {% endfor %}
<\ul> 


## Create new datapoint
(a)
collection = Collection()
collection.name = 'Video Games'
collection.featured_product = Product(pk=1)
collection.save()

(b)
collection = Collection.objects.create(name='a', featured_product_id = 1)

## Modify datapoint
collection = Collection.objects.get(pk=11)
collection.name = 'Games'
collection.featured_product = None
collection.save()

Collection.objects.filter(pk=11).update(featured_products=None)

## Delete
collection = Collection(pk=11)
collection.delete()

Collection.object.filter(id__gt=5).detele()

## Own query
query_set = Products.objects.raw('SELECT * FROM store_product')

from django.db import connection
with connection.cursor() as cursor:
	cursor.execute('SELECT / UPDATE ... any query)


################## FIN ORM - queries #######################

################## INI ADMIN SITE ##########################

python manage.py createsuperuser

(1) INSTALLED_APPS #add django.contrib.sessions
(2) python manage.py migrate
new table: django_session

storefront > urls.py >  admin.site.site_header = 'Storefront Admin'
						admin.site.index_title = 'Admin'

# Add apps
store > admin.py
	from . import models
	admin.site.register(models.Collection)

modify models.Collection and add a function  #to print the title and also order alphabetically
def __str__(self) -> str:
        return self.title
class Meta:
	ordering = ['title']
	
# Customize list page
# > admin.py
#google: django ModelAdmin options
@admin.register(models.Product)
class ProductAdmin(admin.ModelAdmin):
    list_display = ['title', 'unit_price']
	list_editable = ['unit_price']

################## FIN ADMIN SITE ##########################